{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/sklearn/utils/__init__.py:4: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working\n",
      "  from collections import Sequence\n"
     ]
    }
   ],
   "source": [
    "from matplotlib import pyplot\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.imputation.mice as mice\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import Imputer\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(90275, 3)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transactiondate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>90270</th>\n",
       "      <td>10774160</td>\n",
       "      <td>-0.0356</td>\n",
       "      <td>2016-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90271</th>\n",
       "      <td>12046695</td>\n",
       "      <td>0.0070</td>\n",
       "      <td>2016-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90272</th>\n",
       "      <td>12995401</td>\n",
       "      <td>-0.2679</td>\n",
       "      <td>2016-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90273</th>\n",
       "      <td>11402105</td>\n",
       "      <td>0.0602</td>\n",
       "      <td>2016-12-30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90274</th>\n",
       "      <td>12566293</td>\n",
       "      <td>0.4207</td>\n",
       "      <td>2016-12-30</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       parcelid  logerror transactiondate\n",
       "90270  10774160   -0.0356      2016-12-30\n",
       "90271  12046695    0.0070      2016-12-30\n",
       "90272  12995401   -0.2679      2016-12-30\n",
       "90273  11402105    0.0602      2016-12-30\n",
       "90274  12566293    0.4207      2016-12-30"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train16 = pd.read_csv(\"train_2016_v2.csv\", parse_dates=[\"transactiondate\"])\n",
    "print(train16.shape)\n",
    "train16.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.7/site-packages/IPython/core/interactiveshell.py:2785: DtypeWarning: Columns (22,32,34,49,55) have mixed types. Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2985217, 58)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>calculatedbathnbr</th>\n",
       "      <th>decktypeid</th>\n",
       "      <th>...</th>\n",
       "      <th>numberofstories</th>\n",
       "      <th>fireplaceflag</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2985212</th>\n",
       "      <td>168176230</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2985213</th>\n",
       "      <td>14273630</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2985214</th>\n",
       "      <td>168040630</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2985215</th>\n",
       "      <td>168040830</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2985216</th>\n",
       "      <td>168040430</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 58 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          parcelid  airconditioningtypeid  architecturalstyletypeid  \\\n",
       "2985212  168176230                    NaN                       NaN   \n",
       "2985213   14273630                    NaN                       NaN   \n",
       "2985214  168040630                    NaN                       NaN   \n",
       "2985215  168040830                    NaN                       NaN   \n",
       "2985216  168040430                    NaN                       NaN   \n",
       "\n",
       "         basementsqft  bathroomcnt  bedroomcnt  buildingclasstypeid  \\\n",
       "2985212           NaN          NaN         NaN                  NaN   \n",
       "2985213           NaN          NaN         NaN                  NaN   \n",
       "2985214           NaN          NaN         NaN                  NaN   \n",
       "2985215           NaN          NaN         NaN                  NaN   \n",
       "2985216           NaN          NaN         NaN                  NaN   \n",
       "\n",
       "         buildingqualitytypeid  calculatedbathnbr  decktypeid  \\\n",
       "2985212                    NaN                NaN         NaN   \n",
       "2985213                    NaN                NaN         NaN   \n",
       "2985214                    NaN                NaN         NaN   \n",
       "2985215                    NaN                NaN         NaN   \n",
       "2985216                    NaN                NaN         NaN   \n",
       "\n",
       "                ...           numberofstories  fireplaceflag  \\\n",
       "2985212         ...                       NaN            NaN   \n",
       "2985213         ...                       NaN            NaN   \n",
       "2985214         ...                       NaN            NaN   \n",
       "2985215         ...                       NaN            NaN   \n",
       "2985216         ...                       NaN            NaN   \n",
       "\n",
       "         structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\n",
       "2985212                         NaN                NaN             NaN   \n",
       "2985213                         NaN                NaN             NaN   \n",
       "2985214                         NaN                NaN             NaN   \n",
       "2985215                         NaN                NaN             NaN   \n",
       "2985216                         NaN                NaN             NaN   \n",
       "\n",
       "         landtaxvaluedollarcnt  taxamount  taxdelinquencyflag  \\\n",
       "2985212                    NaN        NaN                 NaN   \n",
       "2985213                    NaN        NaN                 NaN   \n",
       "2985214                    NaN        NaN                 NaN   \n",
       "2985215                    NaN        NaN                 NaN   \n",
       "2985216                    NaN        NaN                 NaN   \n",
       "\n",
       "         taxdelinquencyyear  censustractandblock  \n",
       "2985212                 NaN                  NaN  \n",
       "2985213                 NaN                  NaN  \n",
       "2985214                 NaN                  NaN  \n",
       "2985215                 NaN                  NaN  \n",
       "2985216                 NaN                  NaN  \n",
       "\n",
       "[5 rows x 58 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "property16 = pd.read_csv(\"properties_2016.csv\")\n",
    "print(property16.shape)\n",
    "property16.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(90275, 61)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transactiondate</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>...</th>\n",
       "      <th>fireplaceflag</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "      <th>abs_logerror</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10711738</td>\n",
       "      <td>0.0276</td>\n",
       "      <td>2016-08-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>245180.0</td>\n",
       "      <td>567112.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>321932.0</td>\n",
       "      <td>7219.18</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.037113e+13</td>\n",
       "      <td>0.0276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10711755</td>\n",
       "      <td>-0.0182</td>\n",
       "      <td>2016-08-02</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>254691.0</td>\n",
       "      <td>459844.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>205153.0</td>\n",
       "      <td>6901.09</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.037113e+13</td>\n",
       "      <td>0.0182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10711805</td>\n",
       "      <td>-0.1009</td>\n",
       "      <td>2016-05-03</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>235114.0</td>\n",
       "      <td>384787.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>149673.0</td>\n",
       "      <td>4876.61</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.037113e+13</td>\n",
       "      <td>0.1009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10711816</td>\n",
       "      <td>-0.0121</td>\n",
       "      <td>2016-04-05</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>262309.0</td>\n",
       "      <td>437176.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>174867.0</td>\n",
       "      <td>5560.07</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.037113e+13</td>\n",
       "      <td>0.0121</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10711858</td>\n",
       "      <td>-0.0481</td>\n",
       "      <td>2016-07-15</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>232037.0</td>\n",
       "      <td>382055.0</td>\n",
       "      <td>2015.0</td>\n",
       "      <td>150018.0</td>\n",
       "      <td>4878.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.037113e+13</td>\n",
       "      <td>0.0481</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   parcelid  logerror transactiondate  airconditioningtypeid  \\\n",
       "0  10711738    0.0276      2016-08-02                    1.0   \n",
       "1  10711755   -0.0182      2016-08-02                    1.0   \n",
       "2  10711805   -0.1009      2016-05-03                    1.0   \n",
       "3  10711816   -0.0121      2016-04-05                    1.0   \n",
       "4  10711858   -0.0481      2016-07-15                    1.0   \n",
       "\n",
       "   architecturalstyletypeid  basementsqft  bathroomcnt  bedroomcnt  \\\n",
       "0                       NaN           NaN          3.0         4.0   \n",
       "1                       NaN           NaN          3.0         3.0   \n",
       "2                       NaN           NaN          2.0         3.0   \n",
       "3                       NaN           NaN          2.0         4.0   \n",
       "4                       NaN           NaN          2.0         4.0   \n",
       "\n",
       "   buildingclasstypeid  buildingqualitytypeid      ...       fireplaceflag  \\\n",
       "0                  NaN                    4.0      ...                 NaN   \n",
       "1                  NaN                    4.0      ...                 NaN   \n",
       "2                  NaN                    4.0      ...                 NaN   \n",
       "3                  NaN                    4.0      ...                 NaN   \n",
       "4                  NaN                    4.0      ...                 NaN   \n",
       "\n",
       "   structuretaxvaluedollarcnt  taxvaluedollarcnt  assessmentyear  \\\n",
       "0                    245180.0           567112.0          2015.0   \n",
       "1                    254691.0           459844.0          2015.0   \n",
       "2                    235114.0           384787.0          2015.0   \n",
       "3                    262309.0           437176.0          2015.0   \n",
       "4                    232037.0           382055.0          2015.0   \n",
       "\n",
       "   landtaxvaluedollarcnt  taxamount  taxdelinquencyflag  taxdelinquencyyear  \\\n",
       "0               321932.0    7219.18                 NaN                 NaN   \n",
       "1               205153.0    6901.09                 NaN                 NaN   \n",
       "2               149673.0    4876.61                 NaN                 NaN   \n",
       "3               174867.0    5560.07                 NaN                 NaN   \n",
       "4               150018.0    4878.25                 NaN                 NaN   \n",
       "\n",
       "   censustractandblock  abs_logerror  \n",
       "0         6.037113e+13        0.0276  \n",
       "1         6.037113e+13        0.0182  \n",
       "2         6.037113e+13        0.1009  \n",
       "3         6.037113e+13        0.0121  \n",
       "4         6.037113e+13        0.0481  \n",
       "\n",
       "[5 rows x 61 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016 = train16.set_index('parcelid').join(property16.set_index('parcelid'))\n",
    "train2016[\"abs_logerror\"] = abs(train2016[\"logerror\"])\n",
    "train2016.reset_index(inplace=True)\n",
    "print(train2016.shape)\n",
    "train2016.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### fill in NaN - Room, Bath, Bed\n",
    "- fullbathcnt 와 bathroomcnt는 서로 비슷한 값을 가진다.\n",
    "- threequarterbathnbr 최빈값인 1.0 으로 채운다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0,0.5,'bathroomcnt')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pyplot.scatter(train2016[\"fullbathcnt\"], train2016[\"bathroomcnt\"])\n",
    "plt.xlabel(\"fullbathcnt\")\n",
    "plt.ylabel(\"bathroomcnt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transactiondate</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>...</th>\n",
       "      <th>fireplaceflag</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "      <th>abs_logerror</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [parcelid, logerror, transactiondate, airconditioningtypeid, architecturalstyletypeid, basementsqft, bathroomcnt, bedroomcnt, buildingclasstypeid, buildingqualitytypeid, calculatedbathnbr, decktypeid, finishedfloor1squarefeet, calculatedfinishedsquarefeet, finishedsquarefeet12, finishedsquarefeet13, finishedsquarefeet15, finishedsquarefeet50, finishedsquarefeet6, fips, fireplacecnt, fullbathcnt, garagecarcnt, garagetotalsqft, hashottuborspa, heatingorsystemtypeid, latitude, longitude, lotsizesquarefeet, poolcnt, poolsizesum, pooltypeid10, pooltypeid2, pooltypeid7, propertycountylandusecode, propertylandusetypeid, propertyzoningdesc, rawcensustractandblock, regionidcity, regionidcounty, regionidneighborhood, regionidzip, roomcnt, storytypeid, threequarterbathnbr, typeconstructiontypeid, unitcnt, yardbuildingsqft17, yardbuildingsqft26, yearbuilt, numberofstories, fireplaceflag, structuretaxvaluedollarcnt, taxvaluedollarcnt, assessmentyear, landtaxvaluedollarcnt, taxamount, taxdelinquencyflag, taxdelinquencyyear, censustractandblock, abs_logerror]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 61 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ls = train2016[np.isnan(train2016[\"fullbathcnt\"])][\"bathroomcnt\"]\n",
    "train2016.loc[np.isnan(train2016[\"fullbathcnt\"]), \"fullbathcnt\"] = ls\n",
    "\n",
    "train2016[np.isnan(train2016[\"fullbathcnt\"])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0    11912\n",
       "2.0       90\n",
       "3.0        6\n",
       "4.0        1\n",
       "Name: threequarterbathnbr, dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016[\"threequarterbathnbr\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transactiondate</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>...</th>\n",
       "      <th>fireplaceflag</th>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <th>assessmentyear</th>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "      <th>abs_logerror</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 61 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [parcelid, logerror, transactiondate, airconditioningtypeid, architecturalstyletypeid, basementsqft, bathroomcnt, bedroomcnt, buildingclasstypeid, buildingqualitytypeid, calculatedbathnbr, decktypeid, finishedfloor1squarefeet, calculatedfinishedsquarefeet, finishedsquarefeet12, finishedsquarefeet13, finishedsquarefeet15, finishedsquarefeet50, finishedsquarefeet6, fips, fireplacecnt, fullbathcnt, garagecarcnt, garagetotalsqft, hashottuborspa, heatingorsystemtypeid, latitude, longitude, lotsizesquarefeet, poolcnt, poolsizesum, pooltypeid10, pooltypeid2, pooltypeid7, propertycountylandusecode, propertylandusetypeid, propertyzoningdesc, rawcensustractandblock, regionidcity, regionidcounty, regionidneighborhood, regionidzip, roomcnt, storytypeid, threequarterbathnbr, typeconstructiontypeid, unitcnt, yardbuildingsqft17, yardbuildingsqft26, yearbuilt, numberofstories, fireplaceflag, structuretaxvaluedollarcnt, taxvaluedollarcnt, assessmentyear, landtaxvaluedollarcnt, taxamount, taxdelinquencyflag, taxdelinquencyyear, censustractandblock, abs_logerror]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 61 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016.loc[np.isnan(train2016[\"threequarterbathnbr\"]), \"threequarterbathnbr\"] = 1.0\n",
    "train2016[np.isnan(train2016[\"threequarterbathnbr\"])]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### variable change : Log\n",
    "- 독립 변수나 종속 변수가 심하게 한쪽으로 치우친 분포를 보이는 경우\n",
    "- 변수 변환을 위해 log를 취한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 42 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cols = [\"bathroomcnt\", \"fullbathcnt\", \"threequarterbathnbr\", \"roomcnt\", \"bedroomcnt\", \"abs_logerror\"]\n",
    "\n",
    "sns.pairplot(train2016[cols])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def logg(x):\n",
    "    if x == 0:\n",
    "        return 0\n",
    "    return np.log(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.0\n",
       "1    0.0\n",
       "2    0.0\n",
       "3    0.0\n",
       "4    0.0\n",
       "Name: roomcnt_log, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016[\"roomcnt_log\"] = train2016[\"roomcnt\"].apply(logg)\n",
    "train2016[\"roomcnt_log\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.098612\n",
       "1    1.098612\n",
       "2    0.693147\n",
       "3    0.693147\n",
       "4    0.693147\n",
       "Name: bathroomcnt_log, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016[\"bathroomcnt_log\"] = train2016[\"bathroomcnt\"].apply(logg)\n",
    "train2016[\"bathroomcnt_log\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.0\n",
       "1    0.0\n",
       "2    0.0\n",
       "3    0.0\n",
       "4    0.0\n",
       "Name: threequarterbathnbr_log, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016[\"threequarterbathnbr_log\"] = train2016[\"threequarterbathnbr\"].apply(logg)\n",
    "train2016[\"threequarterbathnbr_log\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.098612\n",
       "1    1.098612\n",
       "2    0.693147\n",
       "3    0.693147\n",
       "4    0.693147\n",
       "Name: fullbathcnt_log, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016[\"fullbathcnt_log\"] = train2016[\"fullbathcnt\"].apply(logg)\n",
    "train2016[\"fullbathcnt_log\"].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.386294\n",
       "1    1.098612\n",
       "2    1.098612\n",
       "3    1.386294\n",
       "4    1.386294\n",
       "Name: bedroomcnt_log, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016[\"bedroomcnt_log\"] = train2016[\"bedroomcnt\"].apply(logg)\n",
    "train2016[\"bedroomcnt_log\"].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### fill in NaN - airconditioningtypeid, heatingorsystemtypeid\n",
    "- 각각의 최빈값인 airconditioningtypeid=1.0, heatingorsystemtypeid=2.0을 넣어준다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "airconditioningtypeid    0\n",
       "heatingorsystemtypeid    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016.loc[np.isnan(train2016[\"airconditioningtypeid\"]), \"airconditioningtypeid\"] = 1.0\n",
    "train2016.loc[np.isnan(train2016[\"heatingorsystemtypeid\"]), \"heatingorsystemtypeid\"] = 2.0\n",
    "train2016[[\"airconditioningtypeid\", \"heatingorsystemtypeid\"]].isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### fill in NaN - airconditioningtypeid, heatingorsystemtypeid\n",
    "- fireplacecnt의 최빈값 1.0, fireplaceflag 는 들어있는 true값을 제외하고 모두 false (1/0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "fireplacecnt     0\n",
       "fireplaceflag    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016[\"fireplaceflag\"] = train2016[\"fireplaceflag\"].astype(float)\n",
    "\n",
    "train2016.loc[np.isnan(train2016[\"fireplacecnt\"]), \"fireplacecnt\"] = 1.0\n",
    "train2016.loc[np.isnan(train2016[\"fireplaceflag\"]), \"fireplaceflag\"] = 0.0\n",
    "train2016[[\"fireplacecnt\", \"fireplaceflag\"]].isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(90275, 66)\n"
     ]
    }
   ],
   "source": [
    "print(train2016.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 세금과 관련된 컬럼 fill\n",
    "- structuretaxvaluedollarcnt = taxvaluedollarcnt - landtaxvaluedollarcnt\n",
    "- taxamount : taxamount와 taxvaluedollarcnt의 비율을 구한다음 평균값을 구해서 taxvaluedollarcnt에 곱해준 값을 채움\n",
    "- taxdelinquencyflag : Y값은 1로 대체 NaN 값은 0으로 대체"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "train2016.loc[np.isnan(train2016[\"taxvaluedollarcnt\"]), \"taxvaluedollarcnt\"] = np.mean(train2016[\"taxvaluedollarcnt\"].notnull())\n",
    "train2016.loc[np.isnan(train2016[\"landtaxvaluedollarcnt\"]), \"landtaxvaluedollarcnt\"] = np.mean(train2016[\"landtaxvaluedollarcnt\"].notnull())\n",
    "train2016[\"structuretaxvaluedollarcnt\"] = train2016[\"taxvaluedollarcnt\"] - train2016[\"landtaxvaluedollarcnt\"]\n",
    "train2016.loc[train2016[\"taxdelinquencyflag\"] == 'Y', \"taxdelinquencyflag\"] = 1.0\n",
    "train2016.loc[train2016[\"taxdelinquencyflag\"].isnull(), \"taxdelinquencyflag\"] = 0.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# NaN_taxamount = avg(taxamount / taxvaluedollarcnt) * taxvaluedollarcnt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "rate = (train2016[~np.isnan(train2016[\"taxamount\"])][\"taxamount\"] / train2016[~np.isnan(train2016[\"taxamount\"])][\"taxvaluedollarcnt\"]).mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "train2016.loc[np.isnan(train2016[\"taxamount\"]), \"taxamount\"] = rate * train2016[np.isnan(train2016[\"taxamount\"])][\"taxvaluedollarcnt\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 층과 관련된 컬럼 Fill\n",
    "- numberofstories : structuretaxvaluedollarcnt가 0이면 0, 나머지는 1.0으로 채워줌, 최빈값\n",
    "- 건물세가 없고 층이 Nan값이면 0으로 채움\n",
    "- 1층 면적이 있고 층이 Nan값이면 1로 채워줌"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "train2016.loc[train2016[\"numberofstories\"].isnull() & train2016[\"structuretaxvaluedollarcnt\"]==0.0 ,\"numberofstories\"] = 0.0\n",
    "train2016.loc[(train2016[\"numberofstories\"] == 0.0) & train2016[\"finishedfloor1squarefeet\"].notnull(), \"numberofstories\"] = 1.0\n",
    "train2016[\"numberofstories\"].fillna(value = 1.0, inplace = True)\n",
    "#storytypeid: 0으로 채워줌(유무)\n",
    "train2016[\"storytypeid\"].fillna(value = 0, inplace = True)\n",
    "train2016[\"basementsqft\"].fillna(value = 0, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 면적과 관련된 컬럼 fill"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 총면적이 1층 면적보다 작은경우 1층 면적을 총면적에 대입\n",
    "train2016.loc[train2016[\"calculatedfinishedsquarefeet\"].notnull() < train2016[\"finishedsquarefeet50\"].notnull(), \"calculatedfinishedsquarefeet\"] = train2016[\"finishedsquarefeet50\"]\n",
    "# 층수가 없는 경우 총면적의 NaN은 0\n",
    "train2016.loc[(train2016[\"numberofstories\"] == 0.0) & train2016[\"calculatedfinishedsquarefeet\"].isnull(), \"calculatedfinishedsquarefeet\"] = 0.0\n",
    "# 건물이 있지만 총면적이 0인 경우 총면적의 평균을 대입\n",
    "train2016.loc[(train2016[\"numberofstories\"] != 0.0) & train2016[\"calculatedfinishedsquarefeet\"].isnull(),\"calculatedfinishedsquarefeet\"] = np.mean(train2016[\"calculatedfinishedsquarefeet\"].notnull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1층의 면적을 나타내는 finishedfloor1squarefeet, finishedsquarefeet50의 Nan값은 calculatedfinishedsquarefeet의 값으로 대체(대부분 비슷하지만 조금 차이가남)\n",
    "train2016.loc[train2016[\"finishedfloor1squarefeet\"].isnull(), \"finishedfloor1squarefeet\"] = train2016.loc[train2016[\"finishedfloor1squarefeet\"].isnull(),\"calculatedfinishedsquarefeet\"]\n",
    "train2016.loc[train2016[\"finishedsquarefeet50\"].isnull(), \"finishedsquarefeet50\"] = train2016.loc[train2016[\"finishedsquarefeet50\"].isnull() ,\"calculatedfinishedsquarefeet\"]\n",
    "train2016.loc[train2016[\"finishedsquarefeet6\"].isnull(), \"finishedsquarefeet6\"] = train2016.loc[train2016[\"finishedsquarefeet6\"].isnull(), \"calculatedfinishedsquarefeet\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 총면적과 거주 공간외 공간의 면적이 같은 경우 거주 공간의 면적을 0으로 넣어줌\n",
    "train2016.loc[train2016[\"calculatedfinishedsquarefeet\"].notnull() == train2016[\"finishedsquarefeet13\"].notnull(), \"finishedsquarefeet12\"] = 0.0\n",
    "# finishedsquarefeet12의 NaN값은 calculatedfinishedsquarefeet와 일치 \n",
    "train2016.loc[train2016[\"finishedsquarefeet12\"].isnull(), \"finishedsquarefeet12\"] = train2016.loc[train2016[\"finishedsquarefeet12\"].isnull(), \"calculatedfinishedsquarefeet\"]\n",
    "train2016[\"finishedsquarefeet13\"].fillna(value = 0.0, inplace=True)\n",
    "# finishedsquarefeet15 : calculatedfinishedsquarefeet의 값으로 채워줌\n",
    "train2016.loc[train2016[\"finishedsquarefeet15\"].isnull(), \"finishedsquarefeet15\"] = train2016.loc[train2016[\"finishedsquarefeet15\"].isnull(), \"calculatedfinishedsquarefeet\"]\n",
    "# lotsizesquarefeet의 값이  finishedsquarefeet50(1층면적) 보다 작은 경우 1층면적으로 대체\n",
    "train2016.loc[train2016[\"finishedsquarefeet50\"] > train2016[\"lotsizesquarefeet\"], \"lotsizesquarefeet\"] = train2016.loc[train2016[\"finishedsquarefeet50\"] > train2016[\"lotsizesquarefeet\"] ,\"finishedsquarefeet50\"]\n",
    "# calculatedfinishedsquarefeet(총면적)이 있는데 lotsizesquarefeet이 NaN인 경우 1층의 값으로 대입\n",
    "train2016.loc[train2016[\"lotsizesquarefeet\"].isnull() & train2016[\"calculatedfinishedsquarefeet\"].notnull(), \"lotsizesquarefeet\"] = train2016.loc[train2016[\"lotsizesquarefeet\"].isnull(), \"finishedsquarefeet50\"]\n",
    "\n",
    "train2016.loc[train2016[\"yearbuilt\"].isnull() & train2016[\"buildingqualitytypeid\"] == 7.0, \"yearbuilt\"] = 1950\n",
    "train2016.loc[train2016[\"yearbuilt\"].isnull() & train2016[\"buildingqualitytypeid\"] == 4.0, \"yearbuilt\"] = 1979\n",
    "train2016[\"yearbuilt\"].fillna(value = 1955, inplace = True)\n",
    "\n",
    "train2016.loc[train2016[\"unitcnt\"].isnull() & (train2016[\"calculatedfinishedsquarefeet\"] == 0), \"unitcnt\"] = 0\n",
    "train2016[\"unitcnt\"].fillna(value = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 건설 시기, 건물 구조물 등 컬럼 fill"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "train2016[\"decktypeid\"].fillna(value = 0.0, inplace = True)\n",
    "train2016.loc[train2016[\"decktypeid\"] == 66.0 , \"decktypeid\"] = 1\n",
    "train2016.loc[train2016[\"buildingqualitytypeid\"].isnull() & (train2016[\"structuretaxvaluedollarcnt\"] == 0), \"buildingqualitytypeid\"]=0\n",
    "train2016.loc[train2016[\"buildingqualitytypeid\"].isnull(), \"buildingqualitytypeid\"] = train2016[\"buildingqualitytypeid\"].mode()[0]\n",
    "train2016.loc[train2016[\"buildingclasstypeid\"].notnull(), \"buildingclasstypeid\"] = 1\n",
    "train2016.loc[train2016[\"buildingclasstypeid\"].isnull(), \"buildingclasstypeid\"] = 0\n",
    "train2016[\"architecturalstyletypeid\"].fillna(value=7, inplace=True)\n",
    "train2016['typeconstructiontypeid'].fillna(value=6, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(90275, 66)\n"
     ]
    }
   ],
   "source": [
    "print(train2016.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## yardbuildingsqft17, garagecarcnt, garagetotalsqft : fill in NaN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>parcelid</th>\n",
       "      <th>logerror</th>\n",
       "      <th>transactiondate</th>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <th>architecturalstyletypeid</th>\n",
       "      <th>basementsqft</th>\n",
       "      <th>bathroomcnt</th>\n",
       "      <th>bedroomcnt</th>\n",
       "      <th>buildingclasstypeid</th>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <th>...</th>\n",
       "      <th>taxamount</th>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <th>taxdelinquencyyear</th>\n",
       "      <th>censustractandblock</th>\n",
       "      <th>abs_logerror</th>\n",
       "      <th>roomcnt_log</th>\n",
       "      <th>bathroomcnt_log</th>\n",
       "      <th>threequarterbathnbr_log</th>\n",
       "      <th>fullbathcnt_log</th>\n",
       "      <th>bedroomcnt_log</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>0 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [parcelid, logerror, transactiondate, airconditioningtypeid, architecturalstyletypeid, basementsqft, bathroomcnt, bedroomcnt, buildingclasstypeid, buildingqualitytypeid, calculatedbathnbr, decktypeid, finishedfloor1squarefeet, calculatedfinishedsquarefeet, finishedsquarefeet12, finishedsquarefeet13, finishedsquarefeet15, finishedsquarefeet50, finishedsquarefeet6, fips, fireplacecnt, fullbathcnt, garagecarcnt, garagetotalsqft, hashottuborspa, heatingorsystemtypeid, latitude, longitude, lotsizesquarefeet, poolcnt, poolsizesum, pooltypeid10, pooltypeid2, pooltypeid7, propertycountylandusecode, propertylandusetypeid, propertyzoningdesc, rawcensustractandblock, regionidcity, regionidcounty, regionidneighborhood, regionidzip, roomcnt, storytypeid, threequarterbathnbr, typeconstructiontypeid, unitcnt, yardbuildingsqft17, yardbuildingsqft26, yearbuilt, numberofstories, fireplaceflag, structuretaxvaluedollarcnt, taxvaluedollarcnt, assessmentyear, landtaxvaluedollarcnt, taxamount, taxdelinquencyflag, taxdelinquencyyear, censustractandblock, abs_logerror, roomcnt_log, bathroomcnt_log, threequarterbathnbr_log, fullbathcnt_log, bedroomcnt_log]\n",
       "Index: []\n",
       "\n",
       "[0 rows x 66 columns]"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train2016.loc[train2016.yardbuildingsqft17.isnull(), 'yardbuildingsqft17'] = 0.0\n",
    "train2016[['garagecarcnt', 'garagetotalsqft']][(train2016.garagetotalsqft != 0) & (train2016.garagecarcnt == 0)]\n",
    "train2016.loc[17269025, 'garagecarcnt'] = 1.0\n",
    "train2016.loc[np.isnan(train2016[\"garagecarcnt\"]), \"garagecarcnt\"] = 0.0\n",
    "train2016.loc[np.isnan(train2016[\"garagecarcnt\"])]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "prop_garages =  ['garagecarcnt', 'garagetotalsqft']\n",
    "mean_garagesqft = train2016[prop_garages].groupby(['garagecarcnt']).agg('mean')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def garagesqft_fillna(garagecarcnt):\n",
    "    x = round(mean_garagesqft.loc[garagecarcnt][0], 0)\n",
    "    #print(x)\n",
    "    train2016.loc[(train2016.garagecarcnt == garagecarcnt) & (train2016.garagetotalsqft == 0),'garagetotalsqft'] = x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in mean_garagesqft.index[1:] :\n",
    "    garagesqft_fillna(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fill NaN : poolcnt, pooltypeid2, pooltypeid7, pooltypeid10, yardbuildingsqft26"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "train2016[\"garagecarcnt\"].fillna(value=0, inplace=True)\n",
    "train2016[\"garagetotalsqft\"].fillna(value=0, inplace=True)\n",
    "train2016[\"poolcnt\"].fillna(value=0.0, inplace=True)\n",
    "train2016['pooltypeid2'].fillna(value=0, inplace=True)\n",
    "train2016['pooltypeid7'].fillna(value=0, inplace=True)\n",
    "train2016['pooltypeid10'].fillna(value=0, inplace=True)\n",
    "train2016[\"yardbuildingsqft26\"].fillna(value=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(90276, 66)\n"
     ]
    }
   ],
   "source": [
    "print(train2016.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fill NaN : poolsizesum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_poolsizesum = sm.OLS.from_formula(\"poolsizesum~I(finishedsquarefeet50*0.01)+I(garagetotalsqft*0.01)+C(poolcnt)+0\", data = train2016)\n",
    "poolsizesum_result = model_poolsizesum.fit()\n",
    "predicted_poolsizesum = poolsizesum_result.predict(train2016[['poolcnt','finishedsquarefeet50', 'garagetotalsqft']].dropna())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in predicted_poolsizesum.index :\n",
    "    if train2016.loc[i, 'poolcnt'] > 0 & np.isnan(train2016.loc[i, \"poolsizesum\"]):\n",
    "        train2016.loc[i, 'poolsizesum'] = round(predicted_poolsizesum.loc(0)[i], 0)\n",
    "    else:\n",
    "        pass\n",
    "train2016.loc[train2016[\"poolsizesum\"].isnull() & (train2016[\"poolcnt\"]==0), \"poolsizesum\"] = 0\n",
    "for_mean = train2016[train2016[\"poolcnt\"]==1][\"poolsizesum\"]\n",
    "train2016.loc[(train2016[\"poolcnt\"] == 1) & train2016[\"poolsizesum\"].isnull(), \"poolsizesum\"] = for_mean.dropna().mean()\n",
    "train2016[\"yardbuildingsqft26\"].fillna(value=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fill NaN : regionidzip"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "train2016.loc[np.isnan(train2016[\"regionidzip\"]) & (train2016[\"fips\"] == 6059.0), \"regionidzip\"] = 96987.0\n",
    "train2016.loc[np.isnan(train2016[\"regionidzip\"]) & (train2016[\"fips\"] == 6111.0), \"regionidzip\"] = 97118.0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "train2016 = train2016[:90275]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['logerror',\n",
       " 'airconditioningtypeid',\n",
       " 'basementsqft',\n",
       " 'buildingqualitytypeid',\n",
       " 'calculatedfinishedsquarefeet',\n",
       " 'finishedsquarefeet13',\n",
       " 'finishedsquarefeet50',\n",
       " 'fips',\n",
       " 'fireplacecnt',\n",
       " 'garagecarcnt',\n",
       " 'garagetotalsqft',\n",
       " 'heatingorsystemtypeid',\n",
       " 'lotsizesquarefeet',\n",
       " 'poolcnt',\n",
       " 'poolsizesum',\n",
       " 'pooltypeid10',\n",
       " 'pooltypeid2',\n",
       " 'pooltypeid7',\n",
       " 'regionidzip',\n",
       " 'storytypeid',\n",
       " 'unitcnt',\n",
       " 'yardbuildingsqft17',\n",
       " 'yearbuilt',\n",
       " 'numberofstories',\n",
       " 'fireplaceflag',\n",
       " 'structuretaxvaluedollarcnt',\n",
       " 'taxvaluedollarcnt',\n",
       " 'assessmentyear',\n",
       " 'landtaxvaluedollarcnt',\n",
       " 'taxamount',\n",
       " 'taxdelinquencyflag',\n",
       " 'roomcnt_log',\n",
       " 'bathroomcnt_log',\n",
       " 'threequarterbathnbr_log',\n",
       " 'fullbathcnt_log',\n",
       " 'bedroomcnt_log']"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exc_list = [\"calculatedbathnbr\", \"hashottuborspa\", \"propertyzoningdesc\", \"regionidneighborhood\", \"taxdelinquencyyear\",\\\n",
    "           \"yardbuildingsqft26\", \"longitude\", \"latitude\", \"propertycountylandusecode\", \"propertylandusetypeid\",\\\n",
    "           \"rawcensustractandblock\", \"censustractandblock\", \"regionidcity\", \"regionidcounty\", \"finishedfloor1squarefeet\",\\\n",
    "           \"finishedsquarefeet6\", \"finishedsquarefeet12\", \"finishedsquarefeet15\", \"buildingclasstypeid\",\\\n",
    "           \"decktypeid\", \"architecturalstyletypeid\", \"typeconstructiontypeid\", \"parcelid\", \"transactiondate\",\\\n",
    "           \"bathroomcnt\", \"bedroomcnt\", \"roomcnt\", \"threequarterbathnbr\", \"fullbathcnt\", \"abs_logerror\"]\n",
    "\n",
    "col_list = [c for c in train2016.columns if c not in exc_list]\n",
    "print(len(col_list))\n",
    "col_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:               logerror   R-squared:                       0.000\n",
      "Model:                            OLS   Adj. R-squared:                  0.000\n",
      "Method:                 Least Squares   F-statistic:                     1.202\n",
      "Date:                Fri, 06 Jul 2018   Prob (F-statistic):              0.197\n",
      "Time:                        14:43:50   Log-Likelihood:                 36755.\n",
      "No. Observations:               90275   AIC:                        -7.344e+04\n",
      "Df Residuals:                   90241   BIC:                        -7.312e+04\n",
      "Df Model:                          33                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "================================================================================================\n",
      "                                   coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------------------------\n",
      "logerror                         0.0015      0.003      0.442      0.659      -0.005       0.008\n",
      "airconditioningtypeid            0.0003      0.000      0.735      0.463      -0.000       0.001\n",
      "basementsqft                 -6.499e-06    5.7e-05     -0.114      0.909      -0.000       0.000\n",
      "buildingqualitytypeid            0.0005      0.000      1.200      0.230      -0.000       0.001\n",
      "calculatedfinishedsquarefeet  2.181e-06   3.31e-06      0.659      0.510   -4.31e-06    8.67e-06\n",
      "finishedsquarefeet13         -7.886e-06   2.02e-05     -0.391      0.696   -4.74e-05    3.17e-05\n",
      "finishedsquarefeet50         -1.444e-06   3.21e-06     -0.449      0.653   -7.74e-06    4.85e-06\n",
      "fips                          8.737e-05   6.76e-05      1.293      0.196   -4.51e-05       0.000\n",
      "fireplacecnt                     0.0010      0.004      0.271      0.786      -0.006       0.008\n",
      "garagecarcnt                     0.0012      0.003      0.425      0.671      -0.004       0.007\n",
      "garagetotalsqft              -5.091e-06   1.13e-05     -0.452      0.652   -2.72e-05     1.7e-05\n",
      "heatingorsystemtypeid            0.0001      0.000      0.695      0.487      -0.000       0.001\n",
      "lotsizesquarefeet             2.105e-09   4.81e-09      0.438      0.662   -7.32e-09    1.15e-08\n",
      "poolcnt                          0.0601      0.170      0.354      0.723      -0.273       0.393\n",
      "poolsizesum                  -2.503e-05   2.33e-05     -1.074      0.283   -7.07e-05    2.07e-05\n",
      "pooltypeid10                     0.0030      0.005      0.628      0.530      -0.006       0.012\n",
      "pooltypeid2                     -0.0517      0.168     -0.308      0.758      -0.381       0.278\n",
      "pooltypeid7                     -0.0498      0.168     -0.296      0.767      -0.379       0.280\n",
      "regionidzip                  -1.048e-07   1.47e-07     -0.713      0.476   -3.93e-07    1.83e-07\n",
      "storytypeid                      0.0011      0.007      0.155      0.876      -0.012       0.014\n",
      "unitcnt                         -0.0002      0.001     -0.222      0.824      -0.002       0.002\n",
      "yardbuildingsqft17           -1.532e-06   9.73e-06     -0.158      0.875   -2.06e-05    1.75e-05\n",
      "yearbuilt                      4.42e-05   3.05e-05      1.449      0.147   -1.56e-05       0.000\n",
      "numberofstories                 -0.0023      0.004     -0.620      0.535      -0.010       0.005\n",
      "fireplaceflag                   -0.0122      0.011     -1.115      0.265      -0.034       0.009\n",
      "structuretaxvaluedollarcnt    7.262e+04   2.27e+05      0.320      0.749   -3.73e+05    5.18e+05\n",
      "taxvaluedollarcnt            -7.262e+04   2.27e+05     -0.320      0.749   -5.18e+05    3.73e+05\n",
      "assessmentyear                  -0.0003      0.000     -1.476      0.140      -0.001    9.74e-05\n",
      "landtaxvaluedollarcnt         7.262e+04   2.27e+05      0.320      0.749   -3.73e+05    5.18e+05\n",
      "taxamount                     3.206e-07   2.55e-07      1.258      0.208   -1.79e-07     8.2e-07\n",
      "taxdelinquencyflag              -0.0023      0.004     -0.594      0.552      -0.010       0.005\n",
      "roomcnt_log                     -0.0012      0.002     -0.533      0.594      -0.006       0.003\n",
      "bathroomcnt_log                  0.0081      0.008      1.036      0.300      -0.007       0.023\n",
      "threequarterbathnbr_log         -0.0265      0.023     -1.147      0.251      -0.072       0.019\n",
      "fullbathcnt_log                 -0.0099      0.008     -1.312      0.190      -0.025       0.005\n",
      "bedroomcnt_log                   0.0021      0.002      0.995      0.320      -0.002       0.006\n",
      "==============================================================================\n",
      "Omnibus:                    66201.696   Durbin-Watson:                   1.970\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65036226.775\n",
      "Skew:                           2.171   Prob(JB):                         0.00\n",
      "Kurtosis:                     134.420   Cond. No.                     9.18e+15\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 8.63e-16. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "dfX = sm.add_constant(train2016[col_list])\n",
    "dfy = train16[\"logerror\"]\n",
    "\n",
    "model1 = sm.OLS(dfy, dfX)\n",
    "result1 = model1.fit()\n",
    "print(result1.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:               logerror   R-squared:                       0.006\n",
      "Model:                            OLS   Adj. R-squared:                  0.006\n",
      "Method:                 Least Squares   F-statistic:                     11.65\n",
      "Date:                Fri, 06 Jul 2018   Prob (F-statistic):           3.73e-86\n",
      "Time:                        14:43:53   Log-Likelihood:                 37009.\n",
      "No. Observations:               90275   AIC:                        -7.392e+04\n",
      "Df Residuals:                   90227   BIC:                        -7.347e+04\n",
      "Df Model:                          47                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "====================================================================================================\n",
      "                                       coef    std err          t      P>|t|      [0.025      0.975]\n",
      "----------------------------------------------------------------------------------------------------\n",
      "Intercept                        -2.104e-08   1.93e-08     -1.091      0.275   -5.88e-08    1.67e-08\n",
      "C(airconditioningtypeid)[T.3.0]      0.1168      0.162      0.722      0.471      -0.200       0.434\n",
      "C(airconditioningtypeid)[T.5.0]      0.0112      0.012      0.897      0.370      -0.013       0.036\n",
      "C(airconditioningtypeid)[T.9.0]   8.875e-06      0.161   5.52e-05      1.000      -0.315       0.315\n",
      "C(airconditioningtypeid)[T.11.0]     0.0204      0.022      0.920      0.357      -0.023       0.064\n",
      "C(airconditioningtypeid)[T.13.0]     0.0002      0.004      0.040      0.968      -0.008       0.008\n",
      "C(fips)[T.6059.0]                    0.0019      0.003      0.581      0.561      -0.004       0.008\n",
      "C(fips)[T.6111.0]                   -0.0046      0.005     -0.892      0.373      -0.015       0.005\n",
      "C(heatingorsystemtypeid)[T.2.0]     -0.0115      0.045     -0.256      0.798      -0.099       0.076\n",
      "C(heatingorsystemtypeid)[T.6.0]     -0.0184      0.045     -0.406      0.685      -0.107       0.070\n",
      "C(heatingorsystemtypeid)[T.7.0]     -0.0117      0.045     -0.262      0.794      -0.100       0.076\n",
      "C(heatingorsystemtypeid)[T.10.0]    -0.0522      0.122     -0.427      0.669      -0.292       0.187\n",
      "C(heatingorsystemtypeid)[T.11.0]    -0.0479      0.167     -0.287      0.774      -0.375       0.279\n",
      "C(heatingorsystemtypeid)[T.12.0]    -0.0223      0.167     -0.134      0.893      -0.349       0.305\n",
      "C(heatingorsystemtypeid)[T.13.0]    -0.0357      0.049     -0.733      0.464      -0.131       0.060\n",
      "C(heatingorsystemtypeid)[T.14.0]    -0.0205      0.122     -0.167      0.867      -0.260       0.219\n",
      "C(heatingorsystemtypeid)[T.18.0]    -0.0080      0.055     -0.144      0.885      -0.117       0.101\n",
      "C(heatingorsystemtypeid)[T.20.0]    -0.0285      0.048     -0.597      0.550      -0.122       0.065\n",
      "C(heatingorsystemtypeid)[T.24.0]    -0.0362      0.045     -0.803      0.422      -0.125       0.052\n",
      "C(pooltypeid10)[T.1.0]              -0.0117      0.005     -2.435      0.015      -0.021      -0.002\n",
      "C(pooltypeid2)[T.1.0]               -0.0022      0.006     -0.369      0.712      -0.014       0.010\n",
      "C(pooltypeid7)[T.1.0]                0.0064      0.003      1.868      0.062      -0.000       0.013\n",
      "C(fireplaceflag)[T.1.0]              0.0143      0.012      1.149      0.251      -0.010       0.039\n",
      "C(taxdelinquencyflag)[T.1.0]         0.0247      0.004      6.392      0.000       0.017       0.032\n",
      "basementsqft                      9.754e-05   5.68e-05      1.716      0.086   -1.39e-05       0.000\n",
      "buildingqualitytypeid                0.0002      0.000      0.619      0.536      -0.001       0.001\n",
      "calculatedfinishedsquarefeet      8.283e-06   3.33e-06      2.484      0.013    1.75e-06    1.48e-05\n",
      "finishedsquarefeet13              2.055e-05   2.02e-05      1.020      0.308    -1.9e-05    6.01e-05\n",
      "finishedsquarefeet50              4.459e-06   3.26e-06      1.369      0.171   -1.92e-06    1.08e-05\n",
      "fireplacecnt                         0.0020      0.004      0.563      0.573      -0.005       0.009\n",
      "garagecarcnt                         0.0046      0.003      1.505      0.132      -0.001       0.011\n",
      "garagetotalsqft                  -3.349e-05   1.14e-05     -2.951      0.003   -5.57e-05   -1.12e-05\n",
      "lotsizesquarefeet                 9.413e-09   4.81e-09      1.959      0.050   -6.52e-12    1.88e-08\n",
      "poolcnt                              0.0042      0.008      0.527      0.598      -0.011       0.020\n",
      "poolsizesum                       -4.16e-05   2.31e-05     -1.799      0.072   -8.69e-05    3.72e-06\n",
      "regionidzip                      -3.399e-07   1.47e-07     -2.319      0.020   -6.27e-07   -5.26e-08\n",
      "storytypeid                         -0.0041      0.007     -0.604      0.546      -0.017       0.009\n",
      "unitcnt                             -0.0024      0.001     -2.809      0.005      -0.004      -0.001\n",
      "yardbuildingsqft17               -1.806e-05   9.74e-06     -1.855      0.064   -3.71e-05    1.02e-06\n",
      "yearbuilt                         5.974e-05   3.18e-05      1.879      0.060   -2.57e-06       0.000\n",
      "numberofstories                      0.0116      0.005      2.450      0.014       0.002       0.021\n",
      "structuretaxvaluedollarcnt        2.199e-08   3.57e-09      6.158      0.000     1.5e-08     2.9e-08\n",
      "taxvaluedollarcnt                 2.525e-08   2.42e-09     10.423      0.000    2.05e-08       3e-08\n",
      "assessmentyear                   -4.239e-05   3.88e-05     -1.091      0.275      -0.000    3.37e-05\n",
      "landtaxvaluedollarcnt             3.257e-09   2.53e-09      1.286      0.198   -1.71e-09    8.22e-09\n",
      "taxamount                        -3.468e-06   2.54e-07    -13.648      0.000   -3.97e-06   -2.97e-06\n",
      "roomcnt_log                          0.0085      0.003      3.228      0.001       0.003       0.014\n",
      "bathroomcnt_log                     -0.0144      0.008     -1.819      0.069      -0.030       0.001\n",
      "threequarterbathnbr_log              0.0547      0.023      2.365      0.018       0.009       0.100\n",
      "fullbathcnt_log                      0.0108      0.008      1.417      0.157      -0.004       0.026\n",
      "bedroomcnt_log                      -0.0019      0.002     -0.933      0.351      -0.006       0.002\n",
      "==============================================================================\n",
      "Omnibus:                    66683.206   Durbin-Watson:                   1.929\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65892607.449\n",
      "Skew:                           2.201   Prob(JB):                         0.00\n",
      "Kurtosis:                     135.282   Cond. No.                     9.23e+18\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 8.55e-22. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "model2 = sm.OLS.from_formula(\"logerror ~ \\\n",
    "    C(airconditioningtypeid) + \\\n",
    "    basementsqft + \\\n",
    "    buildingqualitytypeid + \\\n",
    "    calculatedfinishedsquarefeet + \\\n",
    "    finishedsquarefeet13 + \\\n",
    "    finishedsquarefeet50 + \\\n",
    "    C(fips) + \\\n",
    "    fireplacecnt + \\\n",
    "    garagecarcnt + \\\n",
    "    garagetotalsqft + \\\n",
    "    C(heatingorsystemtypeid) + \\\n",
    "    lotsizesquarefeet + \\\n",
    "    poolcnt + \\\n",
    "    poolsizesum + \\\n",
    "    C(pooltypeid10) + \\\n",
    "    C(pooltypeid2) + \\\n",
    "    C(pooltypeid7) + \\\n",
    "    regionidzip + \\\n",
    "    storytypeid + \\\n",
    "    unitcnt + \\\n",
    "    yardbuildingsqft17 + \\\n",
    "    yearbuilt + \\\n",
    "    numberofstories + \\\n",
    "    C(fireplaceflag) + \\\n",
    "    structuretaxvaluedollarcnt + \\\n",
    "    taxvaluedollarcnt + \\\n",
    "    assessmentyear + \\\n",
    "    landtaxvaluedollarcnt + \\\n",
    "    taxamount + \\\n",
    "    C(taxdelinquencyflag) + \\\n",
    "    roomcnt_log + \\\n",
    "    bathroomcnt_log + \\\n",
    "    threequarterbathnbr_log + \\\n",
    "    fullbathcnt_log + \\\n",
    "    bedroomcnt_log\", data=train2016)\n",
    "result2 = model2.fit()\n",
    "print(result2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:               logerror   R-squared:                       0.006\n",
      "Model:                            OLS   Adj. R-squared:                  0.006\n",
      "Method:                 Least Squares   F-statistic:                     11.65\n",
      "Date:                Fri, 06 Jul 2018   Prob (F-statistic):           3.73e-86\n",
      "Time:                        14:44:01   Log-Likelihood:                 37009.\n",
      "No. Observations:               90275   AIC:                        -7.392e+04\n",
      "Df Residuals:                   90227   BIC:                        -7.347e+04\n",
      "Df Model:                          47                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "=======================================================================================================\n",
      "                                          coef    std err          t      P>|t|      [0.025      0.975]\n",
      "-------------------------------------------------------------------------------------------------------\n",
      "Intercept                           -2.582e-08    1.9e-08     -1.357      0.175   -6.31e-08    1.15e-08\n",
      "C(airconditioningtypeid)[T.3.0]         0.1168      0.162      0.722      0.471      -0.200       0.434\n",
      "C(airconditioningtypeid)[T.5.0]         0.0112      0.012      0.897      0.370      -0.013       0.036\n",
      "C(airconditioningtypeid)[T.9.0]      8.875e-06      0.161   5.52e-05      1.000      -0.315       0.315\n",
      "C(airconditioningtypeid)[T.11.0]        0.0204      0.022      0.920      0.357      -0.023       0.064\n",
      "C(airconditioningtypeid)[T.13.0]        0.0002      0.004      0.040      0.968      -0.008       0.008\n",
      "C(fips)[T.6059.0]                       0.0019      0.003      0.581      0.561      -0.004       0.008\n",
      "C(fips)[T.6111.0]                      -0.0046      0.005     -0.892      0.373      -0.015       0.005\n",
      "C(heatingorsystemtypeid)[T.2.0]        -0.0115      0.045     -0.256      0.798      -0.099       0.076\n",
      "C(heatingorsystemtypeid)[T.6.0]        -0.0184      0.045     -0.406      0.685      -0.107       0.070\n",
      "C(heatingorsystemtypeid)[T.7.0]        -0.0117      0.045     -0.262      0.794      -0.100       0.076\n",
      "C(heatingorsystemtypeid)[T.10.0]       -0.0522      0.122     -0.427      0.669      -0.292       0.187\n",
      "C(heatingorsystemtypeid)[T.11.0]       -0.0479      0.167     -0.287      0.774      -0.375       0.279\n",
      "C(heatingorsystemtypeid)[T.12.0]       -0.0223      0.167     -0.134      0.893      -0.349       0.305\n",
      "C(heatingorsystemtypeid)[T.13.0]       -0.0357      0.049     -0.733      0.464      -0.131       0.060\n",
      "C(heatingorsystemtypeid)[T.14.0]       -0.0205      0.122     -0.167      0.867      -0.260       0.219\n",
      "C(heatingorsystemtypeid)[T.18.0]       -0.0080      0.055     -0.144      0.885      -0.117       0.101\n",
      "C(heatingorsystemtypeid)[T.20.0]       -0.0285      0.048     -0.597      0.550      -0.122       0.065\n",
      "C(heatingorsystemtypeid)[T.24.0]       -0.0362      0.045     -0.803      0.422      -0.125       0.052\n",
      "C(pooltypeid10)[T.1.0]                 -0.0117      0.005     -2.435      0.015      -0.021      -0.002\n",
      "C(pooltypeid2)[T.1.0]                  -0.0022      0.006     -0.369      0.712      -0.014       0.010\n",
      "C(pooltypeid7)[T.1.0]                   0.0064      0.003      1.868      0.062      -0.000       0.013\n",
      "C(fireplaceflag)[T.1.0]                 0.0143      0.012      1.149      0.251      -0.010       0.039\n",
      "C(taxdelinquencyflag)[T.1.0]            0.0247      0.004      6.392      0.000       0.017       0.032\n",
      "basementsqft                         9.754e-05   5.68e-05      1.716      0.086   -1.39e-05       0.000\n",
      "buildingqualitytypeid                   0.0002      0.000      0.619      0.536      -0.001       0.001\n",
      "scale(calculatedfinishedsquarefeet)     0.0078      0.003      2.484      0.013       0.002       0.014\n",
      "finishedsquarefeet13                 2.055e-05   2.02e-05      1.020      0.308    -1.9e-05    6.01e-05\n",
      "scale(finishedsquarefeet50)             0.0041      0.003      1.369      0.171      -0.002       0.010\n",
      "fireplacecnt                            0.0020      0.004      0.563      0.573      -0.005       0.009\n",
      "garagecarcnt                            0.0046      0.003      1.505      0.132      -0.001       0.011\n",
      "scale(garagetotalsqft)                 -0.0077      0.003     -2.951      0.003      -0.013      -0.003\n",
      "scale(lotsizesquarefeet)                0.0011      0.001      1.959      0.050    -7.5e-07       0.002\n",
      "poolcnt                                 0.0042      0.008      0.527      0.598      -0.011       0.020\n",
      "poolsizesum                          -4.16e-05   2.31e-05     -1.799      0.072   -8.69e-05    3.72e-06\n",
      "scale(regionidzip)                     -0.0012      0.001     -2.319      0.020      -0.002      -0.000\n",
      "storytypeid                            -0.0041      0.007     -0.604      0.546      -0.017       0.009\n",
      "unitcnt                                -0.0024      0.001     -2.809      0.005      -0.004      -0.001\n",
      "yardbuildingsqft17                  -1.806e-05   9.74e-06     -1.855      0.064   -3.71e-05    1.02e-06\n",
      "yearbuilt                            5.974e-05   3.18e-05      1.879      0.060   -2.57e-06       0.000\n",
      "numberofstories                         0.0116      0.005      2.450      0.014       0.002       0.021\n",
      "scale(structuretaxvaluedollarcnt)       0.0072      0.001      7.026      0.000       0.005       0.009\n",
      "scale(taxvaluedollarcnt)                0.0072      0.001     10.212      0.000       0.006       0.009\n",
      "assessmentyear                      -5.202e-05   3.83e-05     -1.357      0.175      -0.000    2.31e-05\n",
      "scale(landtaxvaluedollarcnt)            0.0062      0.001      6.914      0.000       0.004       0.008\n",
      "scale(taxamount)                       -0.0237      0.002    -13.648      0.000      -0.027      -0.020\n",
      "roomcnt_log                             0.0085      0.003      3.228      0.001       0.003       0.014\n",
      "bathroomcnt_log                        -0.0144      0.008     -1.819      0.069      -0.030       0.001\n",
      "threequarterbathnbr_log                 0.0547      0.023      2.365      0.018       0.009       0.100\n",
      "fullbathcnt_log                         0.0108      0.008      1.417      0.157      -0.004       0.026\n",
      "bedroomcnt_log                         -0.0019      0.002     -0.933      0.351      -0.006       0.002\n",
      "==============================================================================\n",
      "Omnibus:                    66683.206   Durbin-Watson:                   1.929\n",
      "Prob(Omnibus):                  0.000   Jarque-Bera (JB):         65892607.449\n",
      "Skew:                           2.201   Prob(JB):                         0.00\n",
      "Kurtosis:                     135.282   Cond. No.                     2.50e+16\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The smallest eigenvalue is 1.15e-21. This might indicate that there are\n",
      "strong multicollinearity problems or that the design matrix is singular.\n"
     ]
    }
   ],
   "source": [
    "model3 = sm.OLS.from_formula(\"logerror ~ \\\n",
    "    C(airconditioningtypeid) + \\\n",
    "    basementsqft + \\\n",
    "    buildingqualitytypeid + \\\n",
    "    scale(calculatedfinishedsquarefeet) + \\\n",
    "    finishedsquarefeet13 + \\\n",
    "    scale(finishedsquarefeet50) + \\\n",
    "    C(fips) + \\\n",
    "    fireplacecnt + \\\n",
    "    garagecarcnt + \\\n",
    "    scale(garagetotalsqft) + \\\n",
    "    C(heatingorsystemtypeid) + \\\n",
    "    scale(lotsizesquarefeet) + \\\n",
    "    poolcnt + \\\n",
    "    poolsizesum + \\\n",
    "    C(pooltypeid10) + \\\n",
    "    C(pooltypeid2) + \\\n",
    "    C(pooltypeid7) + \\\n",
    "    scale(regionidzip) + \\\n",
    "    storytypeid + \\\n",
    "    unitcnt + \\\n",
    "    yardbuildingsqft17 + \\\n",
    "    yearbuilt + \\\n",
    "    numberofstories + \\\n",
    "    C(fireplaceflag) + \\\n",
    "    scale(structuretaxvaluedollarcnt) + \\\n",
    "    scale(taxvaluedollarcnt) + \\\n",
    "    assessmentyear + \\\n",
    "    scale(landtaxvaluedollarcnt) + \\\n",
    "    scale(taxamount) + \\\n",
    "    C(taxdelinquencyflag) + \\\n",
    "    roomcnt_log + \\\n",
    "    bathroomcnt_log + \\\n",
    "    threequarterbathnbr_log + \\\n",
    "    fullbathcnt_log + \\\n",
    "    bedroomcnt_log\", data=train2016)\n",
    "result3 = model3.fit()\n",
    "print(result3.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def MAE(y, ypred):\n",
    "    #logerror=log(Zestimate)−log(SalePrice)\n",
    "    return np.sum([abs(y[i]-ypred[i]) for i in range(len(y))]) / len(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fit...\n",
      "2.862489239981014e-14\n"
     ]
    }
   ],
   "source": [
    "reg = LinearRegression(n_jobs=-1)\n",
    "reg.fit(train2016[col_list], train2016[\"logerror\"])\n",
    "print('fit...')\n",
    "print(MAE(train2016[\"logerror\"], reg.predict(train2016[col_list])))\n",
    "y_hat = reg.predict(train2016[col_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.0276, -0.0182, -0.1009, ..., -0.005 , -0.0704, -0.0545])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_hat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>logerror</th>\n",
       "      <td>1.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>airconditioningtypeid</th>\n",
       "      <td>9.301099e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>basementsqft</th>\n",
       "      <td>-1.346579e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>buildingqualitytypeid</th>\n",
       "      <td>-1.556914e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>calculatedfinishedsquarefeet</th>\n",
       "      <td>-4.297168e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>finishedsquarefeet13</th>\n",
       "      <td>-1.678447e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>finishedsquarefeet50</th>\n",
       "      <td>7.713675e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fips</th>\n",
       "      <td>-2.030304e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fireplacecnt</th>\n",
       "      <td>-6.071532e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>garagecarcnt</th>\n",
       "      <td>7.979728e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>garagetotalsqft</th>\n",
       "      <td>3.783866e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>heatingorsystemtypeid</th>\n",
       "      <td>8.462876e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>lotsizesquarefeet</th>\n",
       "      <td>-6.092682e-20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>poolcnt</th>\n",
       "      <td>-4.128642e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>poolsizesum</th>\n",
       "      <td>-3.344764e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pooltypeid10</th>\n",
       "      <td>-1.387779e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pooltypeid2</th>\n",
       "      <td>6.522560e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>pooltypeid7</th>\n",
       "      <td>1.942890e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>regionidzip</th>\n",
       "      <td>5.883372e-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>storytypeid</th>\n",
       "      <td>-4.119968e-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unitcnt</th>\n",
       "      <td>-8.252134e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yardbuildingsqft17</th>\n",
       "      <td>-4.580077e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>yearbuilt</th>\n",
       "      <td>-9.330237e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>numberofstories</th>\n",
       "      <td>3.469447e-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fireplaceflag</th>\n",
       "      <td>3.209238e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>structuretaxvaluedollarcnt</th>\n",
       "      <td>9.982621e-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>taxvaluedollarcnt</th>\n",
       "      <td>-9.982621e-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>assessmentyear</th>\n",
       "      <td>2.832561e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>landtaxvaluedollarcnt</th>\n",
       "      <td>9.982621e-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>taxamount</th>\n",
       "      <td>-2.981556e-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>taxdelinquencyflag</th>\n",
       "      <td>1.253338e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>roomcnt_log</th>\n",
       "      <td>-5.117434e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bathroomcnt_log</th>\n",
       "      <td>-8.500145e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>threequarterbathnbr_log</th>\n",
       "      <td>-2.168404e-18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>fullbathcnt_log</th>\n",
       "      <td>-1.717376e-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>bedroomcnt_log</th>\n",
       "      <td>3.417405e-16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         0\n",
       "logerror                      1.000000e+00\n",
       "airconditioningtypeid         9.301099e-17\n",
       "basementsqft                 -1.346579e-16\n",
       "buildingqualitytypeid        -1.556914e-16\n",
       "calculatedfinishedsquarefeet -4.297168e-17\n",
       "finishedsquarefeet13         -1.678447e-16\n",
       "finishedsquarefeet50          7.713675e-17\n",
       "fips                         -2.030304e-16\n",
       "fireplacecnt                 -6.071532e-17\n",
       "garagecarcnt                  7.979728e-17\n",
       "garagetotalsqft               3.783866e-17\n",
       "heatingorsystemtypeid         8.462876e-17\n",
       "lotsizesquarefeet            -6.092682e-20\n",
       "poolcnt                      -4.128642e-16\n",
       "poolsizesum                  -3.344764e-17\n",
       "pooltypeid10                 -1.387779e-17\n",
       "pooltypeid2                   6.522560e-16\n",
       "pooltypeid7                   1.942890e-16\n",
       "regionidzip                   5.883372e-19\n",
       "storytypeid                  -4.119968e-18\n",
       "unitcnt                      -8.252134e-17\n",
       "yardbuildingsqft17           -4.580077e-17\n",
       "yearbuilt                    -9.330237e-17\n",
       "numberofstories               3.469447e-18\n",
       "fireplaceflag                 3.209238e-17\n",
       "structuretaxvaluedollarcnt    9.982621e-09\n",
       "taxvaluedollarcnt            -9.982621e-09\n",
       "assessmentyear                2.832561e-17\n",
       "landtaxvaluedollarcnt         9.982621e-09\n",
       "taxamount                    -2.981556e-19\n",
       "taxdelinquencyflag            1.253338e-16\n",
       "roomcnt_log                  -5.117434e-17\n",
       "bathroomcnt_log              -8.500145e-17\n",
       "threequarterbathnbr_log      -2.168404e-18\n",
       "fullbathcnt_log              -1.717376e-16\n",
       "bedroomcnt_log                3.417405e-16"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame(reg.coef_, index = col_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
